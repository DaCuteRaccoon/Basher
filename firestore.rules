service cloud.firestore {
    match /databases/{database}/documents {


    match /Stories/{storyId} {

        allow list: if request.query.limit <= 100;
        allow read: if true;

    }

       match /Messages {
       
       match /global {
   allow read: if request.auth != null;
  
      }

        match /{userId} {
   allow read: if request.auth.uid == userId;
  
      }


       }

      match /Private/{userId} {
   allow read: if request.auth.uid == userId;
      }

    match /Users/{userId} {

        function validateUserWrite(new_user_data, old_user_data) {

            return (
                
                new_user_data.score == old_user_data.score &&
                (!("stories_created" in old_user_data) || new_user_data.stories_created == old_user_data.stories_created) &&
                new_user_data.last_login == old_user_data.last_login &&
                 new_user_data.recent_words == old_user_data.recent_words &&
                (new_user_data.displayName == old_user_data.displayName || (new_user_data.displayName.size() < 16 && new_user_data.displayName.size() > 1)) &&
                (!("email" in old_user_data) || new_user_data.email == old_user_data.email || new_user_data.email.matches('^.+@.+$'))
            );

        }

        allow read: if true;
        allow list: if request.auth.uid == userId && request.query.limit <= 25;
        allow update: if request.auth.uid == userId &&
            validateUserWrite(request.resource.data, resource.data);

    }

     

    match /Users/{userId}/Stories/{storyId} {

        function canStart(diff_data){

        return (diff_data.stories_created == 0 || diff_data.score / diff_data.stories_created > 100 )

     }

        function validateNewWord(the_data){

           return  (

                    the_data.new_word is string && 
                    the_data.new_word.size() > 0 && 
                    the_data.new_word.size() < 30 &&

                    ( 
                    (get(/databases/$(database)/documents/Stories/$(storyId)).data.date_finished == 0 && 
                    (the_data.new_word.matches('^([-\'0-9a-zÀ-ÿ]|[Þß÷þø])+$') ||
                    (the_data.new_word == "[END]" && get(/databases/$(database)/documents/Stories/$(storyId)).data.story.size() >= 29)))
										||
                    (get(/databases/$(database)/documents/Private/$(userId)).data.queued_stories.hasAll([storyId]) || 
                    (!(exists(/databases/$(database)/documents/Stories/$(storyId))) && canStart(get(/databases/$(database)/documents/Users/$(userId)).data)))
										)
                    
                  );

     }

     function validateRating(the_data)
     {
          return (the_data.rating is number && the_data.rating > 0 && the_data.rating <= 5 && get(/databases/$(database)/documents/Stories/$(storyId)).data.date_finished > 0) 
     }
    
        function validateEntries(the_data,the_keys) {

            return (

                    (!("no_vote" in the_keys) || the_data.no_vote is bool) &&

                    (!("yes_vote" in the_keys) || the_data.yes_vote is bool) &&

                    (!("rating" in the_keys) || validateRating(the_data)) &&

                    (!("new_word" in the_keys) || validateNewWord(the_data)) &&

                    (!("punctuation" in the_keys) || (the_data.punctuation is string && (the_data.punctuation == "" || the_data.punctuation == "." || the_data.punctuation == "," || the_data.punctuation == "!" || the_data.punctuation == "?"))) &&
                
                    (!("submit_title" in the_keys) || (the_data.submit_title is string && the_data.submit_title.size() <= 30)) &&

                    (!("title_vote" in the_keys) || (( the_data.title_vote is number && get(/databases/$(database)/documents/Stories/$(storyId)).data.date_finished > 0) &&
                                ( the_data.title_vote > 1 || (the_data.title_vote == 1 && "submit_title" in the_keys))))                  
                
                );

        }

        allow read, list: if request.auth.uid == userId;
        allow create: if request.auth.uid == userId && validateEntries(request.resource.data, request.resource.data.keys());
        allow update: if request.auth.uid == userId && validateRating(request.resource.data);
    }
}
}